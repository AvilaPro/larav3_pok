1. Con composer: composer create-project --prefer-dist laravel/laravel "nombre"
2. Con php artisan list   Se puede ver una lista de los comandos disponibles con artisan
2.1  Escribiendo cualquiera de los comandos listados le podemos pasar el flag "-h" y con ello obtendremos mas claridad del que 
hace cada comando y que dato espera.
2.2 Como por ejemplo: php arisan make:controller -h    Este serviria para ver la ayuda de ese comando.
3. Podemos darle nombre a nuestra aplicacion a traves del comando php artisan app:name "nombre"
3.1 Si al ejecutar el comando anterior da el siguiente mensaje: "There are no commands defined in the "app" namespace" 
deberas solucionarlo con lo siguiente: composer require andrey-helldar/laravel-app --dev (y con esto ya puedes repetir 
el punto 3.)
4. Cambiar dentro de config/app.php modificar el time zone por: America/Caracas (asi en mi caso)
5. Alli mismo cambiar el idioma: 'locale' => 'es,
6. Ahora para que exista el idioma espanol dentro de nuestro proyexto debemos ir a resorces/lang/ crear una nueva 
carpeta llamado "es" alli crear cada una de los archivos encontrados en la carpeta "en" y sacando del repositorio 
(https://github.com/caouecs/Laravel-lang) entramos a src/ y alli buscamos es/ y vamos copiando la informacion en los 
archivos requeridos.
7.Recordar que HTTP es el protocolo de comunicacion que permite las transferencias de informacion en la WWW World Wide Web
La Http define una serie de metodos para poder hacer uso de los recursos disponibles, entre estos metodos esta GET. El GET solicita
una representaccion del recurso solicitado. Esta POST el cual envia los datos para que sea procesados por el recurso.
Otro metodo es el PUT / PATCH se utilizan para actualizar un recuros especifico. Tambien esta el DELETE que borra un recurso especifico.
8.ROUTES Las Rutas y su importancia.
En la carpeta "routes" tenemos una ruta llamada web.php.
Si escribimos en la consola php artisan serve nos cargara la vista en la ruta de la ip de laravel
Como podemos crear nuestras propia ruta? Pues en el archivo mecionado se copia lo siguiente:
Route:: con el verbo HTTP get y un nombre a esa ruta, dentro de los parametros del get podemos colocar uestra closure que no es mas que una funcion.
Queda asi: Route::get('/nombre_ruta', function(){
    return 'Hello World, es mi primera ruta :P';
});
Podemos ver esta nueva ruta colocandola en el navegador.
Con 127.0.0.1:8000/nombre_ruta
Tambien podemos recibir informacion como parametro dentro de nuestra ruta
Ruta con parametro: 
Route::get('/name/{name}', function($name){
    return 'Hola soy '. $name . ' '. $lastname;
});
para poder accesar correctamente a las rutas que reciben parametros debemos ingresar todos los parametros que le pensamos pasar.
Sin embargo podemos colocar valores por defecto a los parametros e indicar que dichos parametros son opcionales.
Como se hace eso? Pues escribiendo como sigue:
Route::get('/name/{name}/lastname/{lastname?}', function($name, $lastname = null){
    return 
});
Aqui el parametro name es obligatorio por lo que debe pasarse obligatoriamente y el parametro lastname no es obligatorio y por ende se le da un posible valor por defecto (en este caso null)
9. CONTROLLER Controladores
Los controladores se almacenan en la carpeta App/Http/Controllers
Alli se alamacenan los controladores
Para crear un nuevo controlador hay dos maneras: Manual y artisan
Manual: Vamos a la carpeta y manualmente creamos un archivo .php que sera nuestro controlador.
Ej: PruebaController.php
<?php

namespace LaraPok\Http\Controllers;

use LaraPok\Http\Controllers\Controller; //Por eso de la erencia se incluye esto

class PruebaController extends Controller{ //Recordar que esta clase hereda de Controller
    /* public function prueba(){
        return 'Estoy dentro de PruebController XD'; 
    Con este verificamos que entre correctamente a la funcion y al controlador*/
    public function prueba($param){
        return 'Estoy dentro de PruebController recibo este parametro '.$param;
        //esta func ya recibe parametros que se pueden pasar por el metodo get de la ruta.
    }
}
Como podemos usar este controlador?
Pues vamos a las rutas y hacemos los siguiente en el archivo web.php
//Route::get('prueba', 'PruebaController@prueba'); //paso 1 cap9
//Aqui como primer param se incluye la palabra con que accedere
//en este caso prueba, luego separado por una coma ','
//el nombre del controladora y con un '@' colocamos la funcion que debera ejecutarse
Route::get('prueba/{name}', 'PruebaController@prueba'); //paso2 cap9
//Aqui se le pasa por parametro si se desea un valor que se manejara en le controlador



Quede en el video #10 sin iniciar aun  de la serie: https://www.youtube.com/playlist?list=PLIddmSRJEJ0sxS-RmqdRMlkyWOQWvEGEt