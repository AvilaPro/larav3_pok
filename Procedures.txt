1. Con composer: composer create-project --prefer-dist laravel/laravel "nombre"
2. Con php artisan list   Se puede ver una lista de los comandos disponibles con artisan
2.1  Escribiendo cualquiera de los comandos listados le podemos pasar el flag "-h" y con ello obtendremos mas claridad del que 
hace cada comando y que dato espera.
2.2 Como por ejemplo: php arisan make:controller -h    Este serviria para ver la ayuda de ese comando.
3. Podemos darle nombre a nuestra aplicacion a traves del comando php artisan app:name "nombre"
3.1 Si al ejecutar el comando anterior da el siguiente mensaje: "There are no commands defined in the "app" namespace" 
deberas solucionarlo con lo siguiente: composer require andrey-helldar/laravel-app --dev (y con esto ya puedes repetir 
el punto 3.)
4. Cambiar dentro de config/app.php modificar el time zone por: America/Caracas (asi en mi caso)
5. Alli mismo cambiar el idioma: 'locale' => 'es,
6. Ahora para que exista el idioma espanol dentro de nuestro proyexto debemos ir a resorces/lang/ crear una nueva 
carpeta llamado "es" alli crear cada una de los archivos encontrados en la carpeta "en" y sacando del repositorio 
(https://github.com/caouecs/Laravel-lang) entramos a src/ y alli buscamos es/ y vamos copiando la informacion en los 
archivos requeridos.
7.Recordar que HTTP es el protocolo de comunicacion que permite las transferencias de informacion en la WWW World Wide Web
La Http define una serie de metodos para poder hacer uso de los recursos disponibles, entre estos metodos esta GET. El GET solicita
una representaccion del recurso solicitado. Esta POST el cual envia los datos para que sea procesados por el recurso.
Otro metodo es el PUT / PATCH se utilizan para actualizar un recuros especifico. Tambien esta el DELETE que borra un recurso especifico.
8.ROUTES Las Rutas y su importancia.
En la carpeta "routes" tenemos una ruta llamada web.php.
Si escribimos en la consola php artisan serve nos cargara la vista en la ruta de la ip de laravel
Como podemos crear nuestras propia ruta? Pues en el archivo mecionado se copia lo siguiente:
Route:: con el verbo HTTP get y un nombre a esa ruta, dentro de los parametros del get podemos colocar uestra closure que no es mas que una funcion.
Queda asi: Route::get('/nombre_ruta', function(){
    return 'Hello World, es mi primera ruta :P';
});
Podemos ver esta nueva ruta colocandola en el navegador.
Con 127.0.0.1:8000/nombre_ruta
Tambien podemos recibir informacion como parametro dentro de nuestra ruta
Ruta con parametro: 
Route::get('/name/{name}', function($name){
    return 'Hola soy '. $name . ' '. $lastname;
});
para poder accesar correctamente a las rutas que reciben parametros debemos ingresar todos los parametros que le pensamos pasar.
Sin embargo podemos colocar valores por defecto a los parametros e indicar que dichos parametros son opcionales.
Como se hace eso? Pues escribiendo como sigue:
Route::get('/name/{name}/lastname/{lastname?}', function($name, $lastname = null){
    return 
});
Aqui el parametro name es obligatorio por lo que debe pasarse obligatoriamente y el parametro lastname no es obligatorio y por ende se le da un posible valor por defecto (en este caso null)
9. CONTROLLER Controladores
Los controladores se almacenan en la carpeta App/Http/Controllers
Alli se alamacenan los controladores
Para crear un nuevo controlador hay dos maneras: Manual y artisan
Manual: Vamos a la carpeta y manualmente creamos un archivo .php que sera nuestro controlador.
Ej: PruebaController.php
<?php

namespace LaraPok\Http\Controllers;

use LaraPok\Http\Controllers\Controller; //Por eso de la erencia se incluye esto

class PruebaController extends Controller{ //Recordar que esta clase hereda de Controller
    /* public function prueba(){
        return 'Estoy dentro de PruebController XD'; 
    Con este verificamos que entre correctamente a la funcion y al controlador*/
    public function prueba($param){
        return 'Estoy dentro de PruebController recibo este parametro '.$param;
        //esta func ya recibe parametros que se pueden pasar por el metodo get de la ruta.
    }
}
Como podemos usar este controlador?
Pues vamos a las rutas y hacemos los siguiente en el archivo web.php
//Route::get('prueba', 'PruebaController@prueba'); //paso 1 cap9
//Aqui como primer param se incluye la palabra con que accedere
//en este caso prueba, luego separado por una coma ','
//el nombre del controladora y con un '@' colocamos la funcion que debera ejecutarse
Route::get('prueba/{name}', 'PruebaController@prueba'); //paso2 cap9
//Aqui se le pasa por parametro si se desea un valor que se manejara en le controlador
10. CONTROLADORES Crear un enrutado Rest Full
Esto de REST Full se refiere a un end-point que implementa REST. REST es o se define un conjunto 
de principios arquitectónicos por los que se pueden diseñar servicios Web que se centran en 
los recursos de un sistema, lo que incluye la forma en que los estados de los recursos se 
dirigen y transfieren a través de HTTP por un amplio rango de clientes que están escritos en 
diferentes lenguajes.
Para empezar a trabajar con Rest en laravel podemos aprovechar la herramienta de 
laravel: Resource Controller
el comando es de terminal: php artisan make:controller TrainerController --resource
En nuestro caso fue ese porque es el controlador que se usara para cada "entrenador" Poke.
Este controlador se encuentra en la ruta especificada que hablamos en el punto 9.
App/Http/Controllers
En este controlador creado con artisan ya estara completamente el CRUD creado.
Podemos crear la ruta del mismo en nuestro archivo web.php como sigue:
Route::resource('trainers','TrainerController');
//Con esta ruta definida sabremos que tenemos acceso a nuestro controlador. //cap 10
//Como lo sabemos? Pues es lo que esta expuesto en la documentacion de laravel en #Resource Controller
Aqui dejo al URl actual de la documentacion: https://laravel.com/docs/6.x/controllers#resource-controllers
Tambien dentro de nuestro controlador creado en el index colocamos esto para probar que funciona:
 return 'Hola desde el controlador Trainers';
11. VIEWS Vistas
Una vista es la capa de presentacion en como mostramos informacion a un usuario.
Como deseamos tener una vista para el registro de un trainer debemos crearla y ademas
invocarla desde el controlador de trainers.
En TrainerController en la funcion create() retornaremos la vista para crear dicho trainer.
En la carpeta de resources/views/ crearemos una subcarpeta para todo lo que tenga que ver con
los trainer. Dentro crearemos el archivo create.blade.php y en el controlador le indicaremos que
el debera mostrar dicha vista de la siguiente forma: return view('trainers.create');
En nuestra vista (create.blade.php) creamos la estructura html que vamos a mostrar. Ademas podemos
linkear el Bootstrap CDN para que sea mas facil crear la estructura.
Para obtener el Bootstrap CDN: https://getbootstrap.com/docs/3.3/getting-started/
12. BLADE
Blade es una herramienta que implementa laravel para crear plantillas dentro sus aplicaciones.
Para trabajar con Blade basta con conocer sus directivas.
Primero se recomienda crear una carpeta dentro de views llamada layouts/
Alli podemos crear nuestras clases padres de plantillas blade
Para establecer directivas de clase padre se usa la directiva @yield('nombre') 
Para que una plantilla pueda ser usada en otra vista se usa la directiva @extends('layouts.nameLayout')
Para introducir contenido html a la directiva padre se usa la directiva @section('nameLayout')
Dentro se escribe el html a ser usado
Se cierra con un @endsection
Nota: no todas las directivas @section ameritan ser abiertas y cerradas, solo se cierran aquellas que contengan estructura html
13. HTTP Requests
Los Requests es el servicio de poder ejecutar en si en CRUD.
Para nuestro ejemplo vamos a crear el nuevo Trainer. Para ello debemos englobar lo que hemos creado en la vista create dentro de un form.
Como sigue: <form class="form-group" action="/trainers" method="POST">
La clase es la de Bootstrap, el metodo es POST y el action tal como se ve en la documentacion 
de laravel es la ruta que ah de seguir nuestra Requests (peticion) que sera manejada en nuestro
controlador en la funcion store().
Como sigue:  return $request->input('name'); //Con esto solo vemos el atributo del input que llamamos name
            //return $request->all();//Esto para visualizar el objeto en si que se esta pasando.
14. ORM Object Relational Mapping
Es una tecnica de programacion para convertir datos utilizando un lenguaje de programacion orientado
a objetos y la utilizacion de una base de datos relacional como motor de persistencia.
Ahora bien con PHP trabajamos en Laravel con Eloquent
Eloquent proporciona una implementacio de ActiveRecord bella y sencilla para trabajar con nuestra
base de datos. Cada tabla tiene un "Modelo" correspondiente que se utiliza para interactuar con esa tabla.
Los modelos le permiten consultar datos en sus tablas, asi como insertar nuevos registros en la misma.
"Modelo": Es la representacion de la informacion. Su trabajo: gestionar dicha informacion.



Quede en el video #14 sin iniciar aun  de la serie: https://www.youtube.com/playlist?list=PLIddmSRJEJ0sxS-RmqdRMlkyWOQWvEGEt